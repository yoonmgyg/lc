class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> result = {-1, -1};
        int left = binarySearch(nums, target, true);
        int right = binarySearch(nums, target, false);
        result[0] = left;
        result[1] = right;
        return result;        
    }

    int binarySearch(vector<int>& nums, int target, bool isSearchingLeft) {
        int left = 0;
        int right = nums.size() - 1;
        int idx = -1;
        // binary search for target in nums
        while (left <= right) {
            int mid = left + (right - left) / 2;
            // adjust right if less than
            if (nums[mid] > target) {
                right = mid - 1;
            } 
            // adjust left is greater than
            else if (nums[mid] < target) {
                left = mid + 1;
            } 
            // choose which position to get
            else {
                idx = mid;
                if (isSearchingLeft) {
                    right = mid - 1;
                } 
                else {
                    left = mid + 1;
                }
            }
        }
        
        return idx;
    }    
