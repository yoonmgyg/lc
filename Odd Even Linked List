class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        // check that list has more than 3 nodes
        if (!head || !head->next || !head->next->next) 
            return head;

        // use slow and fast pointers to get odd and even
        ListNode *odd = head;
        ListNode *even = head->next;
        ListNode *even_start = head->next;
        
        while (odd->next && even->next) {
            // set next to next odd and even in list
            odd->next = odd->next->next;
            even->next = even->next->next;  
            // move to next odd and even nodes
            odd = odd->next;
            even = even->next;
        }
        // place first even node afer last odd node
        odd->next = even_start;  
        return head; 
    }
};
