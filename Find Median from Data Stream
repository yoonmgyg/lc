class MedianFinder: 
    def __init__(self):
        self.lowerhalf = [] 
        self.upperhalf = [] 

    def addNum(self, num):
        if len(self.lowerhalf) == 0:
            heapq.heappush(self.lowerhalf, -num)
            return
        
        if num <= -self.lowerhalf[0]:
            heapq.heappush(self.lowerhalf, -num) # Go to the max Heap 
        else:
            heapq.heappush(self.upperhalf, num) # Go to the min Heap
            

        if len(self.lowerhalf) - len(self.upperhalf) == 2:
            heapq.heappush(self.upperhalf, - heapq.heappop(self.lowerhalf))
        elif len(self.upperhalf) - len(self.lowerhalf) == 2:
            heapq.heappush(self.lowerhalf, - heapq.heappop(self.upperhalf))
        

    def findMedian(self):
        if len(self.lowerhalf) == len(self.upperhalf):
            return (- self.lowerhalf[0] + self.upperhalf[0] )/2.0 
        elif len(self.lowerhalf) > len(self.upperhalf):
            return -float(self.lowerhalf[0])
        else:
            return float(self.upperhalf[0])

