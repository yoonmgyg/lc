class Solution {
public:
  int minDistance(string word1, string word2) {
    const int m = word1.length();a
    const int n = word2.length(); 
    // vector of minimum edits from word 1 to word 2
    vector<vector<int>> dp(m + 1, vector<int>(n + 1));

    // fill 0 column and row with same amount of operations
    for (int i = 1; i <= m; ++i)
      dp[i][0] = i;

    for (int j = 1; j <= n; ++j)
      dp[0][j] = j;

    // loop through each part of matrix
    for (int i = 1; i <= m; ++i)
      for (int j = 1; j <= n; ++j)
        // if equal, copy previous amount
        if (word1[i - 1] == word2[j - 1])
          dp[i][j] = dp[i - 1][j - 1];
        // else, get previous minimum and add 1 operation
        else
          dp[i][j] = min({dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]}) + 1;
                             //replace       //delete        //insert
    return dp[m][n];
  }
};
