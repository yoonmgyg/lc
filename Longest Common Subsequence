class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int text1Length = text1.size(), text2Length = text2.size();
        // dp array to store length at each index
        int dp[text1Length + 1][text2Length + 1];
        memset(dp, 0, sizeof(dp));
      
        // loop through both strings
        for (int i = 1; i <= text1Length; i++) {
            for (int j = 1; j <= text2Length; j++) {
                // if current characters match, add 1 to the length 
                if (text1[i - 1] == text2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    // if not, take the maximum length of skipping the current character of text1 or text2.
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
      
        // return last value of dp which contains longest subseq for both strings
        return dp[text1Length][text2Length];
    }
};
