class Solution {
public:
    int x, y, xLen, yLen, countZeros = 0, totalZeros = 0, res = 0, cell;
    void dfs(vector<vector<int>>& grid, int x, int y) {
        // check that grid is within bounds
        if (x < 0 || y < 0 || x == xLen || y == yLen) 
            return;
        cell = grid[y][x];
        // increase unique paths if all cells were visited
        if (cell) {
            res += cell == 2 && countZeros == totalZeros;
            return;
        }
        // marking cell as visited
        grid[y][x] = -1;
        countZeros++;
        // loop through north, south, east, west cells 
        dfs(grid, x, y - 1);
        dfs(grid, x + 1, y);
        dfs(grid, x, y + 1);
        dfs(grid, x - 1, y);
        // backtracking cell as visitable
        grid[y][x] = 0;
        countZeros--;
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        // setting class variables right
        yLen = grid.size();
        xLen = grid[0].size();
        for (int i = 0; i < yLen; ++i) {
            for (int j = 0; j < xLen; ++j) {
                cell = grid[i][j];
                // finding the starting point
                if (cell == 1) {
                    x = i;
                    y = j;
                }
                // increasing countZeros for each cell == 0
                totalZeros += !cell;
            }
        }
        // begin looping through all directions from start point
        dfs(grid, x, y - 1);
        dfs(grid, x + 1, y);
        dfs(grid, x, y + 1);
        dfs(grid, x - 1, y);
        return res;
    }
};
