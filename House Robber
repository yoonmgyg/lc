// get maximum number of money if two adjacent indices can't be used

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();

        if (n == 1) {
            return nums[0];
        }
        // set up 1d dp for all possible combinations
        vector<int> dp(n, 0);

        // money from first house
        dp[0] = nums[0];
        // money from second house 
        dp[1] = max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            // get max of next house or house after skipping and store maximum amount at n
            dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]);
        }
        // return maximum amount found at end of dp
        return dp[n - 1];        
    }
};
