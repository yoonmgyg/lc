/*
Searches for a word through a backtracking dfs which checks adjacent grids for next index of word
*/
class Solution {
private:
    vector<pair<int, int>> dir = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    bool dfs(vector<vector<char>>& board, int i, int j, int index, string word) {
        if (index == word.size()) {
            return true;
        }
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || board[i][j] != word[index]) {
            return false;
        }

        char temp = board[i][j];
        board[i][j] = '#';

        for (auto [di, dj] : dir) {
            if (dfs(board, i + di, j + dj, index + 1, word)) {
                return true;
            }
        }

        board[i][j] = temp;
        return false;
    }
public:
    bool exist(vector<vector<char>>& board, string word) {
        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board[0].size(); ++j) {
                if (dfs(board, i, j, 0, word)) {
                    return true;
                }
            }
        }
        return false;
    }
};
