// return list of possible cellphone letter combinations from digits by a backtracking dfs of all letters mapped to the next number
class Solution {
private:
    unordered_map<char, string> digitToLetters = {
        {'2', "abc"},
        {'3', "def"},
        {'4', "ghi"},
        {'5', "jkl"},
        {'6', "mno"},
        {'7', "pqrs"},
        {'8', "tuv"},
        {'9', "wxyz"}
    };

    void backtrack(vector<string>& comb, string digits, int index, string letters) {
        if (index == digits.size()) {
            comb.push_back(letters);
            return;
        }
        string nextLetters = digitToLetters[digits[index]];
        for (char letter : nextLetters) {
            backtrack(comb, digits, index + 1, letters + letter);
        }
    }
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if (!digits.empty()) {
            backtrack(res, digits, 0, "");
        }
        return res;
    }
};
