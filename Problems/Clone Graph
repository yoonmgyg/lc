class Solution {
public:
    unordered_map<Node*, Node*> nodeMap;
    Node* cloneGraph(Node* node) {
        if (!node)
            return nullptr;
        
        if (nodeMap.find(node) == nodeMap.end()) { // if node is not in map
            nodeMap[node] = new Node(node->val); // create  new node and loop through neighbors
            for (Node* n : node->neighbors) {
                nodeMap[node]->neighbors.push_back(cloneGraph(n)); // push back recursive nodes onto neighbors
            }
        }
        return nodeMap[node];
    }
};
