/*
CPP
Clones graph through dfs which creates same node and calls dfs on all neighbors
T: O(n)
S: O(n)
*/
class Solution {
public:
    unordered_map<Node*, Node*> nodeGraph;
    Node* cloneGraph(Node* node) {
        if (!node) {
            return nullptr;
        }
        if (nodeGraph.find(node) == nodeGraph.end()) {
            nodeGraph[node] = new Node(node->val);
            for (auto neighbor : node->neighbors) {
                nodeGraph[node]->neighbors.push_back(cloneGraph(neighbor));
            }
        }
        
        return nodeGraph[node];
    }
};

# Python
class Solution:
    def cloneGraph(self, node: Optional[Node]) -> Optional[Node]:
        if not node:
            return None
        
        adj_list = {}
        def dfs(original_node):
            if original_node in adj_list:
                return adj_list[original_node]
            
            clone = Node(original_node.val)
            adj_list[original_node] = clone
            
            for neighbor in original_node.neighbors:
                clone.neighbors.append(dfs(neighbor))
            
            return clone
        
        return dfs(node)
