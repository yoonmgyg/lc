/*
Gets the longest univalue sum through a dfs which checks the subbranches for the same value and keeps track of left and right lengths
*/
class Solution {
public:
    int longestUnivaluePath(TreeNode* root) {
        dfs(root);
        return maxPath;
    }
private:
    int maxPath = 0;
    int dfs(TreeNode* root) {
        if (!root) {
            return 0;
        }
        int left = dfs(root->left);
        int right = dfs(root->right);

        int leftLen = 0;
        int rightLen = 0;

        if (root->left && root->left->val == root->val) {
             leftLen = left + 1;
        } 

        if (root->right && root->right->val == root->val) {
            rightLen = right + 1;
        }
 
        maxPath = max(maxPath, leftLen + rightLen);
        return max(leftLen, rightLen);

    }
};
