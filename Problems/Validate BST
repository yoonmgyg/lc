/*
DFS through subtrees, storing current node's value as maximum and minimum for right and left nodes.
*/
class Solution {
private:
    bool validate(TreeNode* root, long minimum, long maximum) {
        if (!root) {
            return true;
        }

        if (root->val >= maximum || root->val <= minimum) {
            return false;
        }

        return validate(root->left, minimum, root->val) && validate(root->right, root->val, maximum);
    }
public:
    bool isValidBST(TreeNode* root) {
        return validate(root, LONG_MIN, LONG_MAX);
    }
};
