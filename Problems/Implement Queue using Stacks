/*
CPP solution
Implements queue using 2 stacks to represent input and output elements
*/
class MyQueue {
public:
    stack<int> in, out;
    MyQueue() {
    }
    
    void push(int x) {
        in.push(x); // add to in stack
    }
    
    int pop() {
        peek();
        int firstout = out.top(); // return top of out stack
        out.pop();
        return firstout;
    }
    
    int peek() {
        if (out.empty()) { // pop elements from in into out to get FIFO order
            while (!in.empty()) {
                out.push(in.top());
                in.pop();
            }
        }
        return out.top();
    }
    
    bool empty() {
        return in.empty() && out.empty(); // check if both stacks are empty
    }
};

# Python solution
class MyQueue:
    def __init__(self):
        self.input = []
        self.output = []

    def push(self, x: int) -> None:
        self.input.append(x)

    def pop(self) -> int:
        self.peek()
        return self.output.pop()

    def peek(self) -> int:
        if not self.output:
            while self.input:
                self.output.append(self.input.pop())
        
        return self.output[-1]

    def empty(self) -> bool:
        return not self.input and not self.output
