class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        int fresh = 0;
        queue<pair<int, int>> q;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2) { // rotting into q
                    q.push({i, j});
                } else if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }

        if (fresh == 0) {
            return 0;
        }

        int minutes = -1;
        vector<pair<int, int>> dirs = {{1, 0},{-1, 0},{0, -1},{0, 1}};

        while (!q.empty()) {
            int qsize = q.size();
            while (qsize--) {
                auto [x, y] = q.front();
                q.pop(); // get and remove front of q

                for (auto [dx, dy] : dirs) { // go in 4 dirs from front
                    int i = x + dx;
                    int j = y + dy;
                    if (i >= 0 && i < m && j >= 0 && j < n && grid[i][j] == 1) {
                        grid[i][j] = 2;
                        q.push({i, j});
                        fresh --;
                    }
                }
            }
            minutes++;
        }

        return fresh > 0 ? -1 : minutes;


    }
};
