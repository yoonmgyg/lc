/*
Gets the minutes for rotting oranges by counting fresh oranges, pushing rotting oranges into queue for BFS with minutes being counter per level
*/
class Solution {
public:
    vector<pair<int, int>> dir = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int, int>> q;
        int fresh = 0;
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                if (grid[i][j] == 2) {
                    q.push({i, j});
                } else if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }

        int minutes = 0;
        while (!q.empty() && fresh > 0) {
            int rotting = q.size();
            minutes++;
            
            for (int i = 0; i < rotting; ++i) {
                auto [currR, currC] = q.front();
                q.pop();
                for (auto [dR, dC] : dir) {
                    int newR = currR + dR;
                    int newC = currC + dC;
                    if (newR >= 0 && newR < grid.size() && newC >= 0 && newC < grid[0].size() && grid[newR][newC] == 1) {
                        grid[newR][newC] = 2;
                        q.push({newR, newC});
                        fresh--;
                    }
                }
            }            
        }
        return fresh == 0 ? minutes : -1;
    }
};
