/*
Reorders list according to L0 -> Ln -> L1 -> Ln-1... by reversing back half of list and merging both lists

class Solution {
public:
    void reorderList(ListNode* head) {
        if (!head || !head->next || !head->next->next) { // check if empty or small
            return;
        }
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast->next) { // get middle of list
            slow = slow->next;
            fast = fast->next->next;
        }

        ListNode* curr = slow->next;
        slow->next = nullptr
        ListNode* prev = nullptr;
        while (curr) { // reverse back half
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        ListNode* reversed = prev;
        while (reversed && head) { // merge both lists
            ListNode* nextHead = head->next;
            ListNode* nextReverse = reversed->next;

            head->next = reversed;
            reversed->next = nextHead;

            head = nextHead;
            reversed = nextReverse;
        }
    }
};
