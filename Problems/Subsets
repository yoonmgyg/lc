/*
Get all possible subset of nums by getting all previous subsets and adding each number from nums
*/
class Solution {
private: 
    void backtrack(vector<int>& nums, vector<vector<int>>& res, vector<int>& subset, int index) {
        if (index == nums.size()) {
            res.push_back(subset);
            return;
        }

        subset.push_back(nums[index]);
        backtrack(nums, res, subset, index + 1);

        subset.pop_back();
        backtrack(nums, res, subset, index + 1);


    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> subset;
        backtrack(nums, res, subset, 0);
        return res;
    }
};
