/*
Gets the paths equal to sum through a backtracking DFS which subtracts their current value from the sum
*/

class Solution {
private:
    void backtrack(TreeNode* root, vector<int>& path, vector<vector<int>>& res, int targetSum) {
        if (!root) {
            return;
        }

        path.push_back(root->val);
        if (!node->left && !node->right) {
            if (root->val == targetSum) {
                res.push_back(path);
            }
        }
        else {
            backtrack(root->left, path, res, targetSum - root->val);
            backtrack(root->right, path, res, targetSum - root->val);
        }
        path.pop_back();
    }
public:
    bool pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> res;
        vector<int> path
        backtrack(root, path, res, 0, targetSum);
        return res;
    }
};
