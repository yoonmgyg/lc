class Solution {
public:
    int m, n;
    int DIR[5] = {0, 1, 0, -1, 0};
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        int ans = 0;
        for (int r = 0; r < m; r++) {  // loop through each square of grid
            for (int c = 0; c < n; c++) {
                ans = max(ans, dfs(grid, r, c)); // return max area gotten
            }
        }
        return ans;
    }
    
    int dfs(vector<vector<int>>& grid, int r, int c) {
        if (r < 0 || r == m || c < 0 || c == n || grid[r][c] == 0) // return 0 if exceeding bounds
            return 0;
        int ans = 1;
        grid[r][c] = 0; // mark square as visited
        for (int i = 0; i < 4; i++)  // loop through directions and add any land
            ans += dfs(grid, r + DIR[i], c + DIR[i+1]);
        return ans;
    }
};
