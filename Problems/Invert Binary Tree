/*
CPP solution 
Switches left and right subtrees to invert Binary Tree
T: O(n)
S: O(n)
*/
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if (!root) 
            return nullptr;

        TreeNode* tmp = root->left; // copy left
        root->left = root->right; // set left to right
        root->right = tmp; // set right to left 
        invertTree(root->left); // dfs to subchildren
        invertTree(root->right);
        return root; 
    }
};

# Python
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return
        
        tmp = root.left
        root.left = root.right
        root.right = tmp
        
        self.invertTree(root.left)
        self.invertTree(root.right)

        return root
