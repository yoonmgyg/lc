class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        vector<vector<int>> dp(n, vector<int>(n)); // store dp results in 2d vector
        
        for (int gap = 0; gap < n; gap++) // loop through piles
            for (int i = 0, j = gap; j < n; i++, j++) { // loop variables for beginning or end of row 
                if (gap == 0) // if 1 pile, take remaining
                    dp[i][j] = piles[i];
                else if (gap == 1) // if 2 piles, get max from 
                    dp[i][j] = max(piles[i], piles[j]); 
                else {
                    int case1 = piles[i] + min(dp[i+2][j], dp[i+1][j-1]); // case in which start is greater
                    int case2 = piles[j] + min(dp[i+1][j-1], dp[i][j-2]); // case in which end is greater
                    dp[i][j] = max(case1, case2); // assign maximum from cases
                }
            }
        return dp[0][n-1];
    }
};
