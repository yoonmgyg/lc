/*
CPP
Finds longest substring without repeating characters by creating a sliding window which moves the beginning when a duplicate is found
T: O(n)
S: O(1)
*/
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_set<char> chars;
        int maxChars = 0;

        int start = 0;
        for (int end = 0; end < s.length(); end++) { // loop through each char
            while (chars.find(s[end]) != chars.end()) { // if char can be found, erase beginning until found
                chars.erase(s[start]);
                start++;
            }
            chars.insert(s[end]);
            maxChars = max(maxChars, end - start + 1);
        }
        return maxChars;
    }
};

# Python
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        left = 0
        max_len = 0
        char_set = set()

        for right in range(len(s)):
            while s[right] in char_set:
                char_set.remove(s[left])
                left += 1

            char_set.add(s[right])
            max_len = max(max_len, right - left + 1)

        return max_len
