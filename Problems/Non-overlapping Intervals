/* 
Gets the number of intervals to be removed for all to be non-overlapping intervals by subtracting the size with the non-overlapping intervals
Non-overlapping intervals are found by sorting the intervals by the end ascending, then comparing the beginning with the last non-overlapping interval
*/
bool compareEnd(vector<int>& a, vector<int>& b) {
    return a[1] < b[1];
}

class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if (intervals.empty()) {
            return 0;
        }

        sort(intervals.begin(), intervals.end(), compareEnd); // sort by end

        int nonOverlap = 1;
        int end = intervals[0][1];
        for (int i = 1; i < intervals.size(); ++i) { // loop through intervals
            if (intervals[i][0] >= end) { // if not overlapping, set as next end
                end = intervals[i][1];
                nonOverlap++;
            }
        }

        return intervals.size() - nonOverlap;
    }
};
