/*
DFS through adjacency list by inserting into visited set and calling DFS on all neighbors
*/
class Solution {
private:
    unordered_map<int, vector<int>> buildList(int n, vector<vector<int>> edges) {
        unordered_map<int, vector<int>> adjList;
        for (int i = 0; i < n; ++i) {
            adjList[i] = {};
        }
        for (int i = 0; i < edges.size(); ++i) {
            adjList[edges[i][0]].push_back(edges[i][1]);
            adjList[edges[i][1]].push_back(edges[i][0]);
        }
        return adjList;
    }
    void dfs(int node, unordered_map<int, vector<int>>& adj, unordered_set<int>& visited) {
        if (visited.find(node) != node.end()) {
            visited.insert(node);
            for (int neighbor : adjList[node]) {
                dfs(neighbor);
            }
        }
    }
public:
    void adjacencyDFS(int n, vector<vector<int>> edges) {
        unordered_map<int, vector<int>> adjList = buildList(n, edges);
        if (!adjList) {
            return;
        }
        unordered_set<int> visited;
        dfs(adjList[0], adjList, visited);
    }
}
