/*
CPP Solution
Checks if ransom note is possible by counting frequency in map
T: O(n)
S: O(n)
*/
class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        unordered_map<char, int> letters;
        // add magazine letters to hash map
        for (auto i : magazine) {
            letters[i]++;
        }
        // subtract ransom note letters
        for (auto i : ransomNote) {
            letters[i]--;
        }
        // check if any ransom note letters outmatch magazine
        for (auto i: letters) {
            if (i.second < 0) {
                return false;
            }
        }
        return true;
    }
};

# Python solution

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        mp = {}

        for letter in magazine:
            mp[letter] = 1 + mp.get(letter, 0)
        
        for letter in ransomNote:
            if letter not in mp or mp[letter] <= 0:
                return False

            mp[letter] -= 1

        return True
