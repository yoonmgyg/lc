/*
Determine duplicate numbers using XOR bit manipulation without extra space
*/
class Solution {
public:
    vector<int> getSneakyNumbers(vector<int>& nums) {
        int xorSum = 0;
        int n = nums.size();

        for (int i = 0; i < n; i++) { // XOR all nums
            xorSum ^= nums[i];
        }

        for (int i = 0; i < n - 2; i++) { // XOR nums without duplicates
            xorSum ^= i;
        }

        int rightmostSetBit = xorSum & ~(xorSum - 1);  // find the rightmost set bit in xorSum

        int firstSneakyNumber = 0;
        int secondSneakyNumber = 0;

        for (int i = 0; i < totalSize; i++) { // separate numbers by right bit
            if (nums[i] & rightmostSetBit) {
                firstSneakyNumber ^= nums[i];
            } else {
                secondSneakyNumber ^= nums[i];
            }
        }
        
        for (int i = 0; i < n-2; i++) {  // AND numbers from 0 to n-2
            if (i & rightmostSetBit) {
                firstSneakyNumber ^= i;
            } else {
                secondSneakyNumber ^= i;
            }
        }

        return {firstSneakyNumber, secondSneakyNumber};
    }
};
