/*
Use a greedy algorithm to get minimum price and compare with current price
Time: O(m + n)
Space: O(1)
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minPrice = prices[0];
        int maxProfit = 0;
        for (int& price : prices) {
            minPrice = min(minPrice, price);
            maxProfit = max(maxProfit, price - minPrice);
        }
        return maxProfit;
    }
};

# Python solution
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        min_price = prices[0]
        max_prof = 0
        for i in prices[1:]:
            min_price = min(min_price, i) 
            max_prof = max(max_prof, i - min_price)

        return max_prof
