/*
CPP
Gets the max volume through a 2 pointer solution which calculates area and height and moves the lesser height 
T: O(n)
S: O(1)
*/
class Solution {
public:
    int maxArea(vector<int>& height) {
        int maxVol = 0;
        int left = 0;
        int right = height.size() - 1;

        while (left <= right) {
            int width = right - left;
            int minHeight = min(height[left], height[right]);
            
            maxVol = max(maxVol, minHeight * width);

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }

        }
        return maxVol;
    }
};

# Python
class Solution:
    def maxArea(self, height: List[int]) -> int:
        left = 0
        right = len(height) - 1
        max_area = 0

        while left < right:
            height = min(heights[left], heights[right])
            area = height * (right - left)
            max_area = max(max_area, area)

            if heights[left] < height[right]:
                left += 1
            else:
                right -= 1
        
        return max_area
