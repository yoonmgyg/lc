/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        // reverses nodes k at a time and returns new nodes
        ListNode temp=head;
        ListNode ans=head;
        // loop while temp pointer isn't null
        while(temp!=null){
            ArrayList<Integer> al=new ArrayList<>();
            ListNode headA=temp;
            // add temps into arraylist to create group to sort
            while(temp!=null && al.size()!=k){
                al.add(temp.val);
                temp=temp.next;
            }
            // reverse group by updating next values
            if(al.size()==k){
                for(int i=al.size()-1;i>=0;i--){
                    headA.val=al.get(i);
                    headA=headA.next;
                }
            }
        }
        return head;
    }
