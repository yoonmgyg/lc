/*
CPP
Checks for existance of both nodes and then checks for values recursively, return true if same
T: O(n)
S: O(n)
*/
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (!p && !q) { // true if both are null
            return true;
        }
        if (!p || !q) { // false if one is null
            return false;
        }

        if (p->val == q->val) { // recursively call on subtrees if same
            return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
        }

        return false; // return false if not equal
    }
};

# Python
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if p and q:
            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
        return p is q
        
