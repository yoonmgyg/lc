/* 
Determine if parentheses are valid by adding onto stack and checking if counterpart is at the top
Time: O(n)
Space: O(n)
*/
class Solution {
public:
    bool isValid(string s) {
        stack<int> stack;
        unordered_map<char, char> bracket = {{')', '('}, {']', '['}, {'}', '{'}};

        for (char c : s) {
            if (bracket.find(c) == bracket.end()) {
                stack.push(c);
            } else if (!stack.empty() && bracket[c] == stack.top()) {
                stack.pop();
            } else {
                return false;
            }
        }
        return stack.empty();
    }
};

# Python solution
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        paren = {")" : "(", "}":"{", "]":"["}

        for char in s:
            if char in paren.values():
                stack.append(char)
            elif char in paren.keys():
                if not stack or paren[char] != stack.pop():
                    return False
        
        return not stack
