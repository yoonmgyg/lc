/*
CPP
Maps values to chars and checks if previous character is less, subtract value if so and add if not
T: O(n)
S: O(1)
*/
class Solution {
public:
    int romanToInt(string s) {
        unordered_map<char, int> val = {{'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}};
        int res = 0;
        for (int i = 0; i < s.size(); i++) {
            if (val[s[i]] < val[s[i+1]] && i != s.size()) { // subtract if lower char is first
                res -= val[s[i]];
            } else { // add other chars according to map 
                res += val[s[i]];
            }
        }
        return res;
    }
};

# Python
class Solution:
    def romanToInt(self, s: str) -> int:
        roman = {
            "I" = 1
            "V" = 5
            "X" = 10
            "L" = 50
            "C" = 100
            "D" = 500
            "M" = 1000
        }

        for a, b in zip(s, s[1:]):
            if (roman[a] < roman[n]):
                res -= roman[a]
            else:
                res += roman[a]
            
        return res + roman[s[-1]]
