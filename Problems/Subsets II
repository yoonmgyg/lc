class Solution {
private:
    void subset(int index, vector<int>& nums, vector<int>& t, vector<vector<int>>& ans){
        ans.push_back(t);
        // loop through eleements and check for duplicates
        for (int i = index; i < nums.size(); i++){
            if (i != index && nums[i] == nums[i-1]) continue;
            // add nums into 
            t.push_back(nums[i]);
            // recursively create subsets for each additional index from current element
            subset(i + 1, nums, t, ans); 
            // remove last element and backtrack
            t.pop_back();
        }
    }

public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> t;
        // sort nums for duplicates
        sort(nums.begin(), nums.end());
        subset(0, nums, t, ans);
        return ans;
    }
};




