/*
CPP
Calculates the maximum diameter of BST through a DFS of branches for length, storing tha maximum of left and right branches in global variable
T: O(n)
S: O(n)
*/
class Solution {
private:
    int diameter = 0;
    int lengthOfTree(TreeNode* root) {
        if (!root) {
            return 0;
        }

        int left = lengthOfTree(root->left);
        int right = lengthOfTree(root->right);
        diameter = max(diameter, left + right);
        return max(left, right) + 1;
    }
public:
    int diameterOfBinaryTree(TreeNode* root) {
        lengthOfTree(root);
        return diameter;

    }
};

# Python
class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        def maxHeight(root: Optional[TreeNode]) -> int:
            if not root:
                return 0

            left = maxHeight(root.left)
            right = maxHeight(root.right) 
            self.diameter = max(self.diameter, left + right)
            return max(left, right) + 1
        
        self.diameter = 0
        maxHeight(root)
        return self.diameter
