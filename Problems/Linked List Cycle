/*
CPP solution
Checks for a LL cycle by having a slow and fast pointer and checking if they meet
T: O(n)
S: O(1)
*/

class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast->next) { // move slow one node and fast two node
            slow = slow->next;
            fast = fast->next->next;
            if (slow == fast) { // if slow and fast meet, there is a cycle
                return true;
            }
        }
        return false;
    }
};

# Python solution
class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow = head
        fast = head

        while (fast and fast.next):
            slow = slow.next
            fast = fast.next.next
            if (slow.val == fast.val):
                return True

        return False
