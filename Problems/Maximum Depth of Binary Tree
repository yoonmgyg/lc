/*
CPP
Gets the maximum depth through a recursive dfs getting the height both children
T: O(n)
S: O(n)
*/
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if (!root) {
            return 0;
        }
        int left = maxDepth(root->left); // search left and right subtrees
        int right = maxDepth(root->right);

        return max(left, right) + 1; // return maximum of children and add 1
    }
};

# Python
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1
        
