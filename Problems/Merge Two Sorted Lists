/*
Merges sorted lists by keeping track of both linked lists and using the one with a greater head value
Time: O(m + n)
Space: O(1)
*/

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* newHead = new ListNode(0);
        ListNode* curr = newHead;
        ListNode* headOne = list1;
        ListNode* headTwo = list2;
        while (headOne && headTwo) { // loop through both ll
            if (headOne->val <= headTwo->val) { // add lesser to current ll
                curr->next = headOne;
                headOne = headOne->next;
            } else  { 
                curr->next = headTwo;
                headTwo = headTwo->next;
            }                
            curr = curr->next;

        }

        curr->next = headOne ? headOne : headTwo; // add remaining ll to end
        return newHead->next;
    }
};

# Python solution
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        curr = dummy

        while list1 and list2:
            if list1.val > list2.val:
                curr.next = list2
                list2 = list2.next
            else:
                curr.next = list1
                list1 = list1.next
            curr = curr.next

        if list1:
            curr.next = list1
        else:
            curr.next = list2

        return dummy.next
