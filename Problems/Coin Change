class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        // Initialize dp array, where dp[i] is the minimum coins needed for amount i
        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0; // 0 coins needed to make amount 0
        
        // Iterate through all amounts from 1 to amount
        for (int i = 1; i <= amount; i++) {
            for (int coin : coins) {
                // If it's possible to use the current coin
                if (i >= coin) {
                    dp[i] = min(dp[i], dp[i - coin] + 1);
                }
            }
        }

        // If the amount can't be formed, return -1, otherwise return the answer
        return dp[amount] > amount ? -1 : dp[amount];
    }
};
