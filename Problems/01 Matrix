/*
CPP
Gets distance from 0 by a BFS from every existing 0 to non-0 numbers + 1
T: O(mn)
S: O(mn)
*/
class Solution {
public:
    vector<pair<int, int>> dir = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        queue<pair<int, int>> q;
        for (int i = 0; i < mat.size(); ++i) {
            for (int j = 0; j < mat[0].size(); ++j) {
                if (mat[i][j] == 0) {
                    q.push({i, j});
                } else {
                    mat[i][j] = -1;
                }
            }
        }

        while (!q.empty()) {
            auto [currR, currC] = q.front();
            q.pop();
            
            for (auto [dR, dC] : dir) {
                int newR = currR + dR;
                int newC = currC + dC;
                if (newR >= 0 && newR < mat.size() && newC >= 0 && newC < mat[0].size() && mat[newR][newC] == -1) {
                    mat[newR][newC] = mat[currR][currC] + 1;
                    q.push({newR, newC});
                }
            }
            
        }
        return mat;
    }
};

# Python
class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        rows, cols = len(mat), len(mat[0])
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        queue = deque()

        for i in range(rows):
            for j in range(cols):
                if mat[i][j] == 0:
                    queue.append((i, j))
                else:
                    mat[i][j] = float('inf')

        while queue:
            row, col = queue.popleft()

            for dr, dc in directions:
                new_row, new_col = row + dr, col + dc

                if 0 <= new_row < rows and 0 <= new_col < cols and mat[new_row][new_col] > mat[row][col] + 1:
                    mat[new_row][new_col] = mat[row][col] + 1
                    queue.append((new_row, new_col))

        return mat        
