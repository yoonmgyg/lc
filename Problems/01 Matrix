/*
Gets distance from 0 by a BFS from every existing 0 to non-0 numbers + 1
*/
class Solution {
public:
    vector<pair<int, int>> dir = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        queue<pair<int, int>> q;
        for (int i = 0; i < mat.size(); ++i) {
            for (int j = 0; j < mat[0].size(); ++j) {
                if (mat[i][j] == 0) {
                    q.push({i, j});
                } else {
                    mat[i][j] = -1;
                }
            }
        }

        while (!q.empty()) {
            auto [currR, currC] = q.front();
            q.pop();
            
            for (auto [dR, dC] : dir) {
                int newR = currR + dR;
                int newC = currC + dC;
                if (newR >= 0 && newR < mat.size() && newC >= 0 && newC < mat[0].size() && mat[newR][newC] == -1) {
                    mat[newR][newC] = mat[currR][currC] + 1;
                    q.push({newR, newC});
                }
            }
            
        }
        return mat;
    }
};
