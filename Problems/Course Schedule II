/*
Gets the course schedule order through Kahn's algorithm, calculating the nodes with an indegrees of 0 and pushing to the queue, decrementing all neighbors and adding them if they have 0 indegrees afterwards
*/
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> adjList(numCourses);
        vector<int> indegrees(numCourses, 0);

        for (auto prereq: prerequisites) {
            adjList[prereq[1]].push_back(prereq[0]);
            indegrees[prereq[0]]++;
        }

        queue<int> q;
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) {
                q.push(i);
            }
        }

        vector<int> res;
        while (!q.empty()) {
            int head = q.front();
            q.pop();

            res.push_back(head);
            for (auto& neighbor : adjList[head]) {
                if (--indegrees[neighbor] == 0) {
                    q.push(neighbor);
                }
            }
        }

        return res.size() == numCourses ? res : vector<int>{};
        
    }
};
