/*
Gets the maximal square through a DP array calculating the size and comparing the 3 top left adjacent squares to each bottom right square
*/
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if (matrix.empty()) {
            return 0;
        }

        int m = matrix.size(); 
        int n = matrix[0].size();

        int maxSide = 0;
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (matrix[i-1][j-1] == '1') {
                    int top = dp[i-1][j];
                    int left = dp[i][j-1];
                    int diag = dp[i-1][j-1];

                    dp[i][j] = min(top, min(left, diag)) + 1;
                    maxSide = max(maxSide, dp[i][j]);
                }
            }
        }

        return maxSide * maxSide;
        
    }
};
