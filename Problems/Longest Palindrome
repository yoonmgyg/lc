/*
CPP Solution
Counts frequency in a map and gets odd numbers of chars
T: O(n)
S: O(1)
*/

class Solution {
public:
    int longestPalindrome(string s) {
        unordered_map<char, int> mp;
        int odd = 0;
        for (char c : s) { // add char by freq to map
            mp[c]++;
            if (mp[c] % 2 != 0) { // count odd characters and decrement when even
                odd++;
            } else {
                odd--;
            }
        }

        if (odd > 1) { // if more than 1 odd, subtract odd chars
            return s.size() - odd + 1;
        }
        return s.size();
    }
};


# Python Solution
class Solution:
    def longestPalindrome(self, s: str) -> int:
        odd = 0
        letters = {}
        for ch in s:
            letters[ch] = 1 + letters.get(ch, 0)
            if (letters[ch] % 2 == 1):
                odd += 1
            else:
                odd -= 1
        
        if odd > 1:
            return len(s) - odd + 1
            
        return len(s)
