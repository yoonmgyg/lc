/* 
Finds the maximum sum of subarrays with distinct elements of size k by storing elements in a set
*/

class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        long long currSum = 0;
        long long maxSum = 0;
        long long start = 0;
        
        unordered_set<int> st;
        for (int end = 0; end < nums.size(); ++end) { // loop through nums
            while (st.count(nums[end])) { // if found in set, remove from start until found
                currSum -= nums[start];
                st.erase(nums[start]);
                start++;
            }

            st.insert(nums[end]);
            currSum += nums[end];

            if (end - start + 1 == k) { // if size k, update max and remove beginning
                maxSum = max(maxSum, currSum);
                currSum -= nums[start];
                st.erase(nums[start]);
                start++;    
            }
        }
        return maxSum;
        
    }
};
