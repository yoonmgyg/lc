/*
CPP 
Checks for anagram by incrementing and decremeting frequency in map
T: O(n)
S: O(1)
*/
class Solution {
public:
    bool isAnagram(string s, string t) {
        unordered_map<char, int> count;
        // count char frequency in s
        for (char c : s) {
            ++count[c];
        }

        // see if char frequency in t matches
        for (char c : t) {
            --count[c];
        }

        // return whether all characters sum to 0
        for (auto x : count) {
            if (c.second != 0) {
                return false;
            }
        }
        return true;
};

# Python
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False

        mp = {}

        for ch in s:
            mp[ch] = mp.get(ch, 0) + 1
        
        for ch in t:
            if ch not in mp or mp[ch] == 0:
                return False
            mp[ch] -= 1
        
        return True
