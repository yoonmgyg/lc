/*
Check if course schedule is possible through inserting prereqs into an adjacency list and using Kahn's algorithm to push all nodes with 0 indegrees to queue and subtracting neighbors
*/
class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> indegrees(numCourses, 0);
        vector<vector<int>> adjList(numCourses);
        for (auto prereq : prerequisites) {
            adjList[prereq[1]].push_back(prereq[0]);
            indegrees[prereq[0]]++;
        }

        queue<int> q;
        for (int i = 0; i < indegrees.size(); ++i) {
            if (indegrees[i] == 0) {
                q.push(i);
            }
        }


        int coursesTaken = 0;
        while (!q.empty()) {
            int head = q.front();
            q.pop();
            coursesTaken++;

            for (int neighbor : adjList[head]) {
                if (--indegrees[neighbor] == 0) {
                    q.push(neighbor);
                }
            }
        }

        return coursesTaken == numCourses;
        
    }
};
