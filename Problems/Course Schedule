class Solution {
public:
    bool canFinish(int n, vector<vector<int>>& prerequisites) {
        vector<int> incoming(n, 0);
        vector<vector<int>> adj(n);
        vector<int> ans;

        for (auto x : prerequisites) { // loop through prereq pairs
            adj[x[0]].push_back(x[1]); // place requirement in index of course
            incoming[x[1]]++; // count prereqs
        }

        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (incoming[i] == 0) { // if no prereqs, add to q
                q.push(i);
            }
        }

        while (!q.empty()) {
            int currClass = q.front(); // add front as visited
            ans.push_back(currClass);
            q.pop();

            for (auto x : adj[currClass]) { // for each prereq in current class, decrement
                incoming[x]--;
                if (incoming[x] == 0) // if all prereqs met, push to q
                    q.push(x);
            }
        }

        return ans.size() == n; // see if all are in ans
    }
};
