class TrieNode {
public:
    bool isWord;
    TrieNode* children[26];
    // initialize children
    TrieNode() {
        isWord = false;
        memset(children, 0, sizeof(children));
    }
};

class Trie {
private:
    TrieNode* root;
    
public:
    Trie() {
        root = new TrieNode();
    }

    
    void insert(string word) {
        TrieNode* node = root;
        // loop through each char and add to dictionary
        for (char c : word) {
            int index = c - 'a';
            if (!node->children[index]) {
                node->children[index] = new TrieNode();
            }
            node = node->children[index];
        }
        node->isWord = true;
    }
    bool search(string word) {
        TrieNode* node = root;
        // loop through each char and check through each node if character exists
        for (char c : word) {
            int index = c - 'a';
            if (!node->children[index]) {
                return false;
            }
            node = node->children[index];
        }
        return node->isWord;
    }
    
    bool startsWith(string prefix) {
        TrieNode* node = root;
        // search for char by going through dictionary and checking each char's node
        for (char c : prefix) {
            int index = c - 'a';
            if (!node->children[index]) {
                return false;
            }
            node = node->children[index];
        }
        return true;
    }
};
