class Trie {
public:
    Trie() {}
    ~Trie() {
        for (auto& x : mp) { // recursively delete tries
            delete x.second;
        }
    }
    void insert(string word) {
        Trie* root = this;
        for (char c : word) {
            if (!root->mp.count(c)) { // if not in map, create new trie for c
                root->mp[c] = new Trie();
            }
        }
        root->isword = true; // mark word at end
    }
    
    bool search(string word) {
        Trie* root = this;
        for (char c : word) { 
            if (!root->mp.count(c)) { // loop to find each char within map
                return false;
            }            
            root = root->mp[c];
        }
        return root->isword;
    }
    
    bool startsWith(string prefix) { 
        Trie* root = this;
        for (char c : prefix) {
            if (!root->mp.count(c)) { // if char of prefix cannot be found, return false
                return false;
            }
            root = root->mp[c];
        }

        return true;
    }

private:
    unordered_map<char, Trie*> mp;
    bool isword = false;
};
