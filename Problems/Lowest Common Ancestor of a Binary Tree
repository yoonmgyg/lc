/*
CPP Solution
Gets the lowest common ancestor by checking with the value of its children
*/
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        // recursively search until a node gets a result from left and right trees
        if (!root) {
            return nullptr;
        }
        if (root->val == p->val || root->val == q->val) { // return root if matching
            return root;     
        }

        TreeNode* left = lowestCommonAncestor(root->left, p, q); // dfs for left and right subtrees
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        if (left && right) { // return root if both exist
            return root;
        }

        return left ? left : right; // return existing if only one
    }
};

# Python Solution
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if not root:
            return None
        if root.val < p.val and root.val < q.val:
            return self.lowestCommonAncestor(root.right, p, q)
        elif root.val > p.val and root.val > q.val:
            return self.lowestCommonAncestor(root.left, p, q)
        else:
            return root


