/*
CPP
Reverse LL by storing previous and future nodes and swapping with current
T: O(n)
S: O(1)
*/
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* after = nullptr, prev = nullptr;
        while (head) {
            after = head->next; // get next node
            head->next = prev; // set next node to previous
            prev = head; // set previous node to current
            head = after; // set current node to next
        }
        return prev;
    }
};

# Python
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        after = None
        prev = None
        while (head):
            after = head.next
            head.next = prev
            prev = head
            head = after
        
        return prev
