/*
Reverse LL by storing previous and future nodes and swapping with current
*/
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* after = nullptr, prev = nullptr;
        while (head) {
            after = head->next; // get next node
            head->next = prev; // set next node to previous
            prev = head; // set previous node to current
            head = after; // set current node to next
        }
        return prev;
    }
};
