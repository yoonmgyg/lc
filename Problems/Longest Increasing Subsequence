/*
Loops through each number and checks previous number for smaller numbers, setting the dp if so
Time: O(n^2)
Space: O(n)
*/

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if (nums.empty()) {
            return 0;
        }

        int n = nums.size();
        vector<int> dp(n, 1);

        int maxLIS = 1;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (nums[i] > nums[j]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                    maxLIS = max(maxLIS, dp[i]);

                }
            }
        }
        return maxLIS;
    }
};

/*
Uses binary search to create the longest increasing index 
Time: O(n log n)
Space: O(n)
*/
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> res;
        for (int n : nums) { // loop through nums
            if (res.empty() || res.back() < n) { // add to res if empty or greatest
                res.push_back(n);
            } else { // otherwise do bin search to find proper index to replace with n
                int left = 0;
                int right = res.size() - 1;
                while (left <= right) {
                    int mid = left + (right - left) / 2;
                    if (res[mid] == n) {
                        break;
                    } else if (res[mid] <= n) {
                        left = mid + 1;
                    } else {
                        right = mid - 1;
                    }
                }
                res[left] = n;
            }
        }

        return res.size();

    }
};
