class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        backtrack(nums, 0, res);
        return res;
        
    }
private:
    void backtrack(vector<int>& nums, int start, vector<vector<int>>& res) {
        if (start == nums.size()) { // add to res once all numbers are added
            res.push_back(nums);
            return;
        }

        for (int i = start; i < nums.size(); i++) { // swap numbers from start to i
            swap(nums[start], nums[i]);
            backtrack(nums, start + 1, res);
            swap(nums[start], nums[i]); // swap number back
        }
    }
};
