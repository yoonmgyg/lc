/*
Checks if a LL is palindrome by reversing back half and comparing both halves
*/
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast->next) { // get middle of list
            slow = slow->next;
            fast = fast->next->next;
        }
        
        ListNode* curr = slow;
        ListNode* prev = nullptr;
        while (curr) { // reverse back half of ll
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        ListNode* left = head;
        ListNode* right = prev;
        while (right) { // compare both halves
            if (left->val != right->val) {
                return false;
            } else {
                left = left->next;
                right = right->next;
            }
        }
        return true;
    }
};
