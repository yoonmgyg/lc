/*
CPP
Gets the level order through a BFS through each level
T: O(n)
S: O(n)
*/
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if (!root) {
            return res;
        }

        queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) {
            vector<int> row;
            int levelLen = q.size();
            for (int i = 0; i < levelLen; ++i) {
                TreeNode* curr = q.front();
                q.pop();

                if (curr->left) {
                    q.push(curr->left);
                }
                if (curr->right) {
                    q.push(curr->right);
                }
                row.push_back(curr->val);
            }
            res.push_back(row);
        }
        return res;
        
    }
};

# Python
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []

        levelq = []
        res = []
        levelq.append(root)
        while levelq:
            level = []
            level_len = len(levelq)
            for i in range(level_len):
                head = levelq.pop(0)
                level.append(head.val)
                if head.left:
                    levelq.append(head.left)
                if head.right:
                    levelq.append(head.right)
            res.append(level)
        return res
