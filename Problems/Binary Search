/*
CPP
Implements a binary search
T: O(log n)
S: O(1)
*/
class Solution {
public:
    int binarySearch(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) { // check if middle is target
                return mid;
            } else if (nums[mid] < target) { // if less, adjust left to middle + 1
                left = mid + 1;   
            } else { // if greater, adjust right to middle - 1
                right = mid - 1;
            }
        }
        return -1;
    }
};

# Python
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1

        while left <= right:
            mid = left + (right - left) // 2
            if (nums[mid] == target):
                return mid
            elif (target < nums[mid]):
                right = mid - 1
            else:
                left = mid + 1

        return -1
