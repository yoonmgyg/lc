/*
Gets the combination of sums through a backtracking dfs of possible combinations which subtract from the target
*/
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> comb;
        sort(candidates.begin(), candidates.end());
        backtrack(candidates, target, 0, comb, res);
        return res;
    }
private:
    void backtrack(vector<int>& candidates, int target, int index, vector<int>& comb, vector<vector<int>>& res) {
        if (target == 0) {
            res.push_back(comb);
            return;
        } 

        for (int i = index; i < candidates.size(); ++i) {
            if (candidates[i] > target) {
                return;
            }
            comb.push_back(candidates[i]);
            backtrack(candidates, target - candidates[i], i, comb, res);
            comb.pop_back();        
        }
    }
};
