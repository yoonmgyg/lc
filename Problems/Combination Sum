class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> combinations;
        backtrack(candidates, target, 0, 0, combinations, res);
        return res;
    }

private:
    void backtrack(vector<int>& candidates, int target, int idx, int total, vector<int>& combinations, vector<vector<int>>& res) {
        if (total == target) { // if equals total, add to res
            res.push_back(combinations);
            return;
        }

        if (total > target || idx >= candidates.size()) { // if exceeding total or idx, skip
            return;
        }

        combinations.push_back(candidates[idx]); // push current index
        backtrack(candidates, target, idx, total + candidates[idx], combinations, res); // backtrack on all candidates with idx
        combinations.pop_back(); // remove previous combinations
        backtrack(candidates, target, idx + 1, total, combinations, res); // backtrack with next index

    }
};
