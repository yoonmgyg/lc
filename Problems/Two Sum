// CPP solution through map
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> numsIndex; // add map matching values to index
        for (int i = 0; i < nums.size(); ++i) { // loop through nums
            if (numsIndex.find(target - nums[i]) != numsIndex.end()) { // find pair by subtracting target
                return {numsIndex[target-nums[i]], i}; // return if pair is found
            }
            else {
                numsIndex[nums[i]] = i; // otherwise add to map
            }
        }
        return {-1, -1};
    }
};


# Python solution through map of sum components
# Time: O(n) 
# Space: O(n)
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        mp = {}
        for i in range(len(nums)):
            if target - nums[i] in mp:
                return [mp[target - nums[i]], i]
            else:
                mp[nums[i]] = i

        return [-1, -1]
