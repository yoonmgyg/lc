/*
Generates parentheses through a dfs which checks for the number of open and closed brackets 
*/
class Solution {
private:
    void backtrack(string s, int n, int open, int close, vector<string>& res) {
        if (s.size() == 2 * n) {
            res.push_back(s);
            return;
        }

        if (open < n) {
            backtrack(s + '(', n, open + 1, close, res);
        }

        if (close < open) {
            backtrack(s + ')', n, open, close + 1, res);
        }
    }
public:
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        backtrack("", n, 0, 0, res);
        return res;
    }
};
