/*
Level order traversal through matrix by a BFS which loops through each level and keeps track of visited
*/
class Solution {
public:
    vector<pair<int, int>> dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    vector<vector<pair<int, int>>> matrixLevelOrder(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        queue<pair<int, int>> q;
        vector<vector<bool>> visited(rows, vector<bool>(cols, false));
        vector<vector<pair<int, int>>> res;

        q.push({0, 0});
        visited[0][0] = true;
        while (!q.empty()) {
            int levelSize = q.size();
            vector<pair<int, int>> level;
            for (int i = 0; i < levelSize; ++i) {
                int currR = q.front().first;
                int currC = q.front().second;
                q.pop();
                for (auto [dr, dc] : dir) {
                    if (currR >= 0 && currR < rows && currC >= 0 && currC < cols && !visited[newR][newC]) {
                        visited[currR][currC] = true;
                        q.push({currR, currC});
                    }
                }
                res.push_back(level);
            }
        }
        return res;
    }
}
